From 677e9c25a3031de00b7c646615243f33121515fb Mon Sep 17 00:00:00 2001
From: Nathan Barrett Morrison <nathan.morrison@timesys.com>
Date: Mon, 13 May 2019 13:51:32 -0400
Subject: [PATCH] Add in SC58x/SC57x CPU freq driver

---
 arch/arm/configs/sc573-ezkit_defconfig |   8 ++
 arch/arm/configs/sc584-ezkit_defconfig |   7 ++
 arch/arm/configs/sc589-ezkit_defconfig |   7 ++
 arch/arm/configs/sc589-mini_defconfig  |   7 ++
 drivers/cpufreq/Kconfig.arm            |  14 +++
 drivers/cpufreq/Makefile               |   3 +-
 drivers/cpufreq/sc5xx-cpufreq.c        | 164 +++++++++++++++++++++++++++++++++
 7 files changed, 209 insertions(+), 1 deletion(-)
 create mode 100644 drivers/cpufreq/sc5xx-cpufreq.c

diff --git a/arch/arm/configs/sc573-ezkit_defconfig b/arch/arm/configs/sc573-ezkit_defconfig
index ba58696bd6b9..e26fa4608fd3 100644
--- a/arch/arm/configs/sc573-ezkit_defconfig
+++ b/arch/arm/configs/sc573-ezkit_defconfig
@@ -25,6 +25,14 @@ CONFIG_ARM_THUMBEE=y
 CONFIG_PREEMPT_VOLUNTARY=y
 CONFIG_HZ_250=y
 # CONFIG_COMPACTION is not set
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_ATTR_SET=y
+CONFIG_CPU_FREQ_GOV_COMMON=y
+CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
 # CONFIG_COREDUMP is not set
 # CONFIG_SUSPEND is not set
 CONFIG_NET=y
diff --git a/arch/arm/configs/sc584-ezkit_defconfig b/arch/arm/configs/sc584-ezkit_defconfig
index 3f8c30d38680..2983dbd3d6b8 100644
--- a/arch/arm/configs/sc584-ezkit_defconfig
+++ b/arch/arm/configs/sc584-ezkit_defconfig
@@ -26,6 +26,13 @@ CONFIG_PREEMPT_VOLUNTARY=y
 CONFIG_HZ_250=y
 # CONFIG_COMPACTION is not set
 CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_ATTR_SET=y
+CONFIG_CPU_FREQ_GOV_COMMON=y
+CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
 # CONFIG_COREDUMP is not set
 # CONFIG_SUSPEND is not set
 CONFIG_NET=y
diff --git a/arch/arm/configs/sc589-ezkit_defconfig b/arch/arm/configs/sc589-ezkit_defconfig
index 5802c7fa2128..7db20c820c9a 100644
--- a/arch/arm/configs/sc589-ezkit_defconfig
+++ b/arch/arm/configs/sc589-ezkit_defconfig
@@ -30,6 +30,13 @@ CONFIG_PREEMPT_VOLUNTARY=y
 CONFIG_HZ_250=y
 # CONFIG_COMPACTION is not set
 CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_ATTR_SET=y
+CONFIG_CPU_FREQ_GOV_COMMON=y
+CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
 CONFIG_CPUFREQ_DT=y
 # CONFIG_COREDUMP is not set
 # CONFIG_SUSPEND is not set
diff --git a/arch/arm/configs/sc589-mini_defconfig b/arch/arm/configs/sc589-mini_defconfig
index bbbcaa9c1a44..b95d11410b1d 100644
--- a/arch/arm/configs/sc589-mini_defconfig
+++ b/arch/arm/configs/sc589-mini_defconfig
@@ -30,6 +30,13 @@ CONFIG_PREEMPT_VOLUNTARY=y
 CONFIG_HZ_250=y
 # CONFIG_COMPACTION is not set
 CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_ATTR_SET=y
+CONFIG_CPU_FREQ_GOV_COMMON=y
+CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
 CONFIG_CPUFREQ_DT=y
 # CONFIG_COREDUMP is not set
 # CONFIG_SUSPEND is not set
diff --git a/drivers/cpufreq/Kconfig.arm b/drivers/cpufreq/Kconfig.arm
index fb586e09682d..7dc479f651ca 100644
--- a/drivers/cpufreq/Kconfig.arm
+++ b/drivers/cpufreq/Kconfig.arm
@@ -298,3 +298,17 @@ config ARM_PXA2xx_CPUFREQ
 	  This add the CPUFreq driver support for Intel PXA2xx SOCs.
 
 	  If in doubt, say N.
+	  
+config SC58X_CPUFREQ
+	bool "SC58X CPUFreq support"
+	depends on ARCH_SC58X
+	default y
+	help
+	  This adds the CPUFreq driver support for SC58X SOCs.
+
+config SC57X_CPUFREQ
+	bool "SC57X CPUFreq support"
+	depends on ARCH_SC57X
+	default y
+	help
+	  This adds the CPUFreq driver support for SC57X SOCs.
\ No newline at end of file
diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index c60c1e141d9d..744079ce793f 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
@@ -84,7 +84,8 @@ obj-$(CONFIG_ARM_TEGRA124_CPUFREQ)	+= tegra124-cpufreq.o
 obj-$(CONFIG_ARM_TEGRA186_CPUFREQ)	+= tegra186-cpufreq.o
 obj-$(CONFIG_ARM_TI_CPUFREQ)		+= ti-cpufreq.o
 obj-$(CONFIG_ARM_VEXPRESS_SPC_CPUFREQ)	+= vexpress-spc-cpufreq.o
-
+obj-$(CONFIG_SC58X_CPUFREQ)		+= sc5xx-cpufreq.o
+obj-$(CONFIG_SC57X_CPUFREQ)		+= sc5xx-cpufreq.o
 
 ##################################################################################
 # PowerPC platform drivers
diff --git a/drivers/cpufreq/sc5xx-cpufreq.c b/drivers/cpufreq/sc5xx-cpufreq.c
new file mode 100644
index 000000000000..3baa3a1a5607
--- /dev/null
+++ b/drivers/cpufreq/sc5xx-cpufreq.c
@@ -0,0 +1,164 @@
+/*
+ * sc5xx clock scaling
+ *
+ * Copyright 2008-2011 Analog Devices Inc.
+ *
+ * Licensed under the GPL-2 or later.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/clk.h>
+#include <linux/cpufreq.h>
+#include <linux/fs.h>
+#include <linux/delay.h>
+#include <mach/clkdev.h>
+
+
+static struct cpufreq_frequency_table sc5xx_freq_table[] = {
+	{
+		.frequency = CPUFREQ_TABLE_END,
+		.driver_data = 0,
+	},
+	{
+		.frequency = CPUFREQ_TABLE_END,
+		.driver_data = 1,
+	},
+	{
+		.frequency = CPUFREQ_TABLE_END,
+		.driver_data = 2,
+	},
+	{
+		.frequency = CPUFREQ_TABLE_END,
+		.driver_data = 0,
+	},
+};
+
+static struct sc5xx_dpm_state {
+	unsigned int csel; /* system clock divider */
+} dpm_state_table[3];
+
+
+/**************************************************************************/
+static void __init sc5xx_init_tables(unsigned long cclk, unsigned long sclk)
+{
+
+	unsigned long csel;
+	int index;
+
+	csel = 1;
+
+	for (index = 0;  csel <= 3 && index < 3; index++, csel++) {
+		sc5xx_freq_table[index].frequency = cclk >> index;
+		dpm_state_table[index].csel = csel;
+
+		pr_debug("cpufreq: freq:%d csel:0x%x\n",
+			sc5xx_freq_table[index].frequency,
+			dpm_state_table[index].csel);
+	}
+}
+
+unsigned long cpu_get_cclk(void)
+{
+	struct clk *clk;
+	unsigned long rate = 0;
+
+	clk = clk_get(NULL, "cgu0_cclk");
+	if (IS_ERR(clk))
+		return -ENODEV;
+
+	rate = clk_get_rate(clk);
+	clk_put(clk);
+
+	return rate;
+}
+
+static unsigned int sc5xx_getfreq_khz(unsigned int cpu)
+{
+	return cpu_get_cclk() / 1000;
+}
+
+unsigned long cpu_set_cclk(int cpu, unsigned long new)
+{
+	struct clk *clk;
+	int ret;
+
+	clk = clk_get(NULL, "cgu0_cclk");
+	if (IS_ERR(clk))
+		return -ENODEV;
+
+	ret = clk_set_rate(clk, new);
+	clk_put(clk);
+	return ret;
+}
+
+static int sc5xx_cpufreq_target(struct cpufreq_policy *policy,
+				unsigned int index)
+{
+	static unsigned long lpj_ref;
+	static unsigned int  lpj_ref_freq;
+	unsigned int old_freq, new_freq;
+	int ret = 0;
+
+	old_freq = sc5xx_getfreq_khz(0);
+	new_freq = sc5xx_freq_table[index].frequency;
+
+	ret = cpu_set_cclk(policy->cpu, new_freq * 1000);
+	if (ret != 0) {
+		WARN_ONCE(ret, "cpufreq set freq failed %d\n", ret);
+		return ret;
+	}
+
+	if (!lpj_ref_freq) {
+		lpj_ref = loops_per_jiffy;
+		lpj_ref_freq = old_freq;
+	}
+	if (new_freq != old_freq) {
+		loops_per_jiffy = cpufreq_scale(lpj_ref,
+				lpj_ref_freq, new_freq);
+	}
+
+	return ret;
+}
+
+static int sc5xx_freq_init(struct cpufreq_policy *policy)
+{
+
+	unsigned long cclk, sclk;
+
+	cclk = cpu_get_cclk() / 1000;
+	sclk = get_sclk() / 1000;
+
+	sc5xx_init_tables(cclk, sclk);
+
+	policy->cpuinfo.transition_latency = 50000; /* 50us assumed */
+
+	return cpufreq_table_validate_and_show(policy, sc5xx_freq_table);
+}
+
+static struct cpufreq_driver sc5xx_cpufreq_driver = {
+	.verify = cpufreq_generic_frequency_table_verify,
+	.target_index = sc5xx_cpufreq_target,
+	.get = sc5xx_getfreq_khz,
+	.init = sc5xx_freq_init,
+	.name = "sc5xx cpufreq",
+	.attr = cpufreq_generic_attr,
+};
+
+static int __init sc5xx_cpufreq_init(void)
+{
+	return cpufreq_register_driver(&sc5xx_cpufreq_driver);
+}
+
+static void __exit sc5xx_cpufreq_exit(void)
+{
+	cpufreq_unregister_driver(&sc5xx_cpufreq_driver);
+}
+
+MODULE_DESCRIPTION("cpufreq driver for sc5xx");
+MODULE_LICENSE("GPL");
+
+module_init(sc5xx_cpufreq_init);
+module_exit(sc5xx_cpufreq_exit);
